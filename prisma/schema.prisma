// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  githubId    String   @unique
  username    String
  accessToken String   
  repos       Repo[]
  chats       Chat[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Repo {
  id          String   @id @default(uuid())
  name        String
  owner       String
  description String?
  processed   Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  filesPath   String?  @unique
  storeId     String?  @unique
  assistantId String?  @unique
  chats       Chat[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, owner, name])
}

model Chat {
  id        String   @id @default(uuid())
  title     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  repoId    String
  repo      Repo     @relation(fields: [repoId], references: [id])
  threadId  String?
  assistantId String?
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  parentId  String?
  senderType SenderType
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SenderType {
  USER
  ASSISTANT
}

